import { NgModule, Optional, SkipSelf } from "@angular/core";
import { CommonModule } from "@angular/common";
import { FormsModule } from "@angular/forms";
import { MaterialModule } from "./material/material.module";
import { NgxDatetimeRangePickerComponent } from "./ngx-datetime-range-picker.component";
import { ObjNgFor } from "./pipes/objNgFor.pipe";
import { NgxDatetimeRangePickerService } from "./ngx-datetime-range-picker.service";
export class NgxDatetimeRangePickerModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`ERR_NGX_DATETIME_RANGE_PICKER:
        NgxDatetimeRangePickerModule is already loaded. Import it in the AppModule only`);
        }
    }
    static forRoot() {
        return {
            ngModule: NgxDatetimeRangePickerModule,
            providers: [NgxDatetimeRangePickerService]
        };
    }
}
NgxDatetimeRangePickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ObjNgFor, NgxDatetimeRangePickerComponent],
                imports: [CommonModule, FormsModule, MaterialModule],
                exports: [NgxDatetimeRangePickerComponent, MaterialModule]
            },] }
];
NgxDatetimeRangePickerModule.ctorParameters = () => [
    { type: NgxDatetimeRangePickerModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGV0aW1lLXJhbmdlLXBpY2tlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2JoYXZpbnBhdGVsL3dvcmtzcGFjZXMvcGVyc29uYWwvbmd4LWRhdGV0aW1lLXJhbmdlLXBpY2tlci9wcm9qZWN0cy9uZ3gtZGF0ZXRpbWUtcmFuZ2UtcGlja2VyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtZGF0ZXRpbWUtcmFuZ2UtcGlja2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQU9wRixNQUFNLE9BQU8sNEJBQTRCO0lBQ3ZDLFlBQW9DLFlBQTBDO1FBQzVFLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUM7d0ZBQ2tFLENBQUMsQ0FBQztTQUNyRjtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTztRQUNuQixPQUFPO1lBQ0wsUUFBUSxFQUFFLDRCQUE0QjtZQUN0QyxTQUFTLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztTQUMzQyxDQUFDO0lBQ0osQ0FBQzs7O1lBbEJGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxRQUFRLEVBQUUsK0JBQStCLENBQUM7Z0JBQ3pELE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsY0FBYyxDQUFDO2dCQUNwRCxPQUFPLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxjQUFjLENBQUM7YUFDM0Q7OztZQUVtRCw0QkFBNEIsdUJBQWpFLFFBQVEsWUFBSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgTWF0ZXJpYWxNb2R1bGUgfSBmcm9tIFwiLi9tYXRlcmlhbC9tYXRlcmlhbC5tb2R1bGVcIjtcbmltcG9ydCB7IE5neERhdGV0aW1lUmFuZ2VQaWNrZXJDb21wb25lbnQgfSBmcm9tIFwiLi9uZ3gtZGF0ZXRpbWUtcmFuZ2UtcGlja2VyLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgT2JqTmdGb3IgfSBmcm9tIFwiLi9waXBlcy9vYmpOZ0Zvci5waXBlXCI7XG5pbXBvcnQgeyBOZ3hEYXRldGltZVJhbmdlUGlja2VyU2VydmljZSB9IGZyb20gXCIuL25neC1kYXRldGltZS1yYW5nZS1waWNrZXIuc2VydmljZVwiO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtPYmpOZ0ZvciwgTmd4RGF0ZXRpbWVSYW5nZVBpY2tlckNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBNYXRlcmlhbE1vZHVsZV0sXG4gIGV4cG9ydHM6IFtOZ3hEYXRldGltZVJhbmdlUGlja2VyQ29tcG9uZW50LCBNYXRlcmlhbE1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4RGF0ZXRpbWVSYW5nZVBpY2tlck1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogTmd4RGF0ZXRpbWVSYW5nZVBpY2tlck1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRVJSX05HWF9EQVRFVElNRV9SQU5HRV9QSUNLRVI6XG4gICAgICAgIE5neERhdGV0aW1lUmFuZ2VQaWNrZXJNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpdCBpbiB0aGUgQXBwTW9kdWxlIG9ubHlgKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hEYXRldGltZVJhbmdlUGlja2VyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hEYXRldGltZVJhbmdlUGlja2VyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbTmd4RGF0ZXRpbWVSYW5nZVBpY2tlclNlcnZpY2VdXG4gICAgfTtcbiAgfVxufVxuIl19