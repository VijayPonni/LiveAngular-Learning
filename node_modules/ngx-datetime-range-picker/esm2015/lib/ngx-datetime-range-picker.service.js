import { Injectable } from "@angular/core";
import { DEFAULT_DATE_FORMAT, NgxDatetimeRangePickerConstants as Constants } from "./ngx-datetime-range-picker.constants";
import { getNotAvailableText, cloneDeep, isNil } from "./ngx-datetime-range-picker.utils";
import { CalendarTypes } from "./interfaces";
import * as i0 from "@angular/core";
const moment = require("moment");
const DEFAULT_TIME_FORMAT = Constants.DEFAULT.TIME_FORMAT;
const MONTHS_AVAILABLE = Constants.CONSTANT.MONTHS_AVAILABLE;
const TZ_NAMES = Constants.CONSTANT.TZ_NAMES;
const DEFAULT_RANGES = Constants.DEFAULT.RANGES;
const MOMENT_CONVERSION_MAP = Constants.CONSTANT.MOMENT_CONVERSION_MAP;
export class NgxDatetimeRangePickerService {
    getDefaultOptions() {
        return cloneDeep(Constants.DEFAULT.OPTIONS);
    }
    getDefaultSettings() {
        return cloneDeep(Constants.DEFAULT.SETTINGS);
    }
    getDefaultState() {
        return cloneDeep(Constants.DEFAULT.STATE);
    }
    checkSettingsValidity(settings) {
        if (settings.type && !CalendarTypes.includes(settings.type)) {
            const errMsg = `${settings.type} is an invalid calendar type. It should one of ${[...CalendarTypes]}`;
            throw new Error(errMsg);
        }
    }
    formatDateToDefaultFormat(date, format) {
        let formattedDate = null;
        if (!date) {
            return;
        }
        if (!isNaN(Number(date))) {
            formattedDate = moment(date).format(DEFAULT_DATE_FORMAT);
        }
        else {
            formattedDate = moment(date, format).format(DEFAULT_DATE_FORMAT);
        }
        return formattedDate;
    }
    formatTimeToDefaultFormat(time) {
        let formattedTime = null;
        if (!time) {
            return;
        }
        if (time.indexOf(":") > -1) {
            if (time.indexOf("AM") > -1 || time.indexOf("PM") > -1) {
                formattedTime = moment(time, "h:mm A").format(DEFAULT_TIME_FORMAT);
            }
            else {
                formattedTime = time;
            }
        }
        else {
            console.warn(`WARN_NGX_DATETIME_RANGE_PICKER:
            The provided time is not in correct format.
            Format: HH:mm or hh:mm A
        `);
        }
        return formattedTime;
    }
    getCalendarRowNumberText(type, number) {
        return (() => {
            switch (type) {
                case "daily":
                    return `W${number}`;
                case "weekly":
                    return "";
                case "monthly":
                    return `Q${number}`;
                case "quarterly":
                    return `${number}`;
                case "yearly":
                    return "";
            }
        })();
    }
    createDefaultRanges(config) {
        const ranges = {};
        const type = config.type;
        const maxDate = cloneDeep(config.maxDate);
        DEFAULT_RANGES[type].forEach((rangeInfo) => {
            ranges[rangeInfo.label] = {
                startDate: moment(maxDate, DEFAULT_DATE_FORMAT)
                    .subtract(rangeInfo.count, MOMENT_CONVERSION_MAP[type])
                    .format(DEFAULT_DATE_FORMAT),
                endDate: maxDate
            };
        });
        ranges["Custom Range"] = { startDate: null, endDate: null };
        return ranges;
    }
    getSanitizedDateArray(config) {
        const sanitizedDateArray = [];
        const type = config.type;
        const dateArray = config.dateArray;
        const inputDateFormat = config.inputDateFormat;
        // dateArray can have nulls
        dateArray.forEach((date) => {
            if (!date) {
                return;
            }
            let format = null;
            if (isNaN(Number(date))) {
                if (inputDateFormat) {
                    format = inputDateFormat;
                }
                else {
                    format = moment(date)._f; // moment does not support this
                }
            }
            if (inputDateFormat !== moment(date)._f) {
                console.warn(`ERR_NGX_DATETIME_RANGE_PICKER:
              inputDateFormat !== dateFormat in dateArray.
              Converted dates might not be as expected
            `);
            }
            const value = format ? moment(date, format) : moment(date);
            if (value) {
                const formattedDate = value.endOf(MOMENT_CONVERSION_MAP[type]).format(DEFAULT_DATE_FORMAT);
                sanitizedDateArray.push(formattedDate);
            }
            else {
                console.warn(`ERR_NGX_DATETIME_RANGE_PICKER:
              dateArray values are in unknown format.
              Pass the format or pass the dates in known format
            `);
            }
        });
        return [...new Set(sanitizedDateArray)];
    }
    getNumberOfWeeks(date) {
        if (!date) {
            return;
        }
        const monthStart = moment(date, DEFAULT_DATE_FORMAT)
            .startOf("month")
            .day();
        const monthEnd = Number(moment(date, DEFAULT_DATE_FORMAT)
            .endOf("month")
            .format("D"));
        return Math.ceil((monthStart + monthEnd) / 7);
    }
    getYearlyWeekCount(year) {
        if (!year) {
            return;
        }
        const yearStartDate = moment(year, "YYYY")
            .startOf("year")
            .format(DEFAULT_DATE_FORMAT);
        const yearEndDate = moment(year, "YYYY")
            .endOf("year")
            .format(DEFAULT_DATE_FORMAT);
        const yearEndWeekEndDate = moment(yearEndDate, DEFAULT_DATE_FORMAT)
            .startOf("week")
            .format(DEFAULT_DATE_FORMAT);
        const yearStartWeekEndDate = moment(yearStartDate, DEFAULT_DATE_FORMAT)
            .endOf("week")
            .format(DEFAULT_DATE_FORMAT);
        const yearStartWeekNumber = this.getWeekNumber(yearStartWeekEndDate);
        const yearEndWeekNumber = this.getWeekNumber(yearEndWeekEndDate);
        return yearEndWeekNumber - yearStartWeekNumber + 1;
    }
    getMonthsAvailable(minDate, maxDate, selectedYear) {
        const months = [];
        if (!minDate || !maxDate || !selectedYear) {
            return;
        }
        minDate = moment(minDate, DEFAULT_DATE_FORMAT).startOf("month");
        maxDate = moment(maxDate, DEFAULT_DATE_FORMAT).startOf("month");
        let minDatems = moment(minDate, DEFAULT_DATE_FORMAT).valueOf();
        let maxDatems = moment(maxDate, DEFAULT_DATE_FORMAT).valueOf();
        const yearStartms = moment()
            .year(selectedYear)
            .startOf("year")
            .valueOf();
        const yearEndms = moment()
            .year(selectedYear)
            .endOf("year")
            .valueOf();
        if (minDatems < yearStartms) {
            minDatems = yearStartms;
        }
        if (maxDatems > yearEndms) {
            maxDatems = yearEndms;
        }
        let minDateMonthNumber = moment(minDatems).month();
        const diff = moment(maxDatems).diff(moment(minDatems), "months");
        const maxMonths = diff < MONTHS_AVAILABLE.length ? diff : MONTHS_AVAILABLE.length;
        for (let i = 0; i <= maxMonths; i++) {
            if (minDateMonthNumber >= MONTHS_AVAILABLE.length) {
                months.push(MONTHS_AVAILABLE[minDateMonthNumber - MONTHS_AVAILABLE.length]);
            }
            else {
                months.push(MONTHS_AVAILABLE[minDateMonthNumber]);
            }
            minDateMonthNumber++;
        }
        return months;
    }
    getYearsAvailable(config) {
        const minDate = config ? config.minDate : "";
        const maxDate = config ? config.maxDate : "";
        const years = [];
        if (minDate && maxDate) {
            const minYear = Number(this.getSelectedYear(minDate));
            const maxYear = Number(this.getSelectedYear(maxDate));
            const diff = maxYear - minYear;
            for (let i = 0; i <= diff; i++) {
                years.push(`${minYear + i}`);
            }
        }
        return years.reverse();
    }
    isDateAvailable(date, minDate, maxDate, startDate, endDate, monthStartDate, monthEndDate, config) {
        let available = false;
        const type = config.type;
        const disableWeekends = config.disableWeekends;
        const disableWeekdays = config.disableWeekdays;
        if (type === "daily") {
            minDate = minDate > monthStartDate ? minDate : monthStartDate;
            maxDate = maxDate < monthEndDate ? maxDate : monthEndDate;
        }
        if (date >= minDate && date <= maxDate) {
            available = true;
            if (available) {
                if (disableWeekends) {
                    available = !this.isWeekend(date);
                }
                if (disableWeekdays) {
                    available = !this.isWeekday(date);
                }
                if (config.dateArray.length) {
                    available = this.isInDateArray(date, config.dateArray, DEFAULT_DATE_FORMAT);
                }
            }
        }
        return available;
    }
    isDateInRange(date, minDate, maxDate, startDate, endDate, monthStartDate, monthEndDate, available, config) {
        let inRange = false;
        const type = config.type;
        const singleDatePicker = config.singleDatePicker;
        if (!singleDatePicker) {
            if (type === "daily") {
                minDate = monthStartDate;
                maxDate = monthEndDate;
            }
            if (date >= startDate && date <= endDate && date >= minDate && date <= maxDate) {
                if (available) {
                    inRange = true;
                }
            }
        }
        return inRange;
    }
    isDateActive(date, startDate, endDate, side) {
        return (date === startDate && side === "left") || (date === endDate && side === "right");
    }
    isDateToday(dateMs, config) {
        const todayDate = moment().format(DEFAULT_DATE_FORMAT);
        const type = config.type;
        const { firstDay, lastDay } = this.getFirstLastDay(todayDate, type);
        const firstDayMs = moment(firstDay, DEFAULT_DATE_FORMAT).valueOf();
        const lastDayMs = moment(lastDay, DEFAULT_DATE_FORMAT).valueOf();
        return dateMs >= firstDayMs && dateMs <= lastDayMs;
    }
    isWeekday(date, format) {
        return !this.isWeekend(date, format);
    }
    isWeekend(date, format) {
        if (!format) {
            format = null;
        }
        const day = moment(date, format).day();
        return day === 0 || day === 6;
    }
    isInDateArray(date, dateArray, format) {
        if (!format) {
            format = null;
        }
        return dateArray.find((d) => moment(d, format).valueOf() === date) !== undefined;
    }
    getCalendarRowVariables(options) {
        const variables = {
            rowNumber: "",
            columns: 0
        };
        const type = options.type;
        const monthStartWeekNumber = options.monthStartWeekNumber;
        const dateRows = options.dateRows;
        const year = `${options.year}`;
        if (type === "daily") {
            variables.rowNumber = `${monthStartWeekNumber + dateRows}`;
            variables.columns = 6;
        }
        else if (type === "weekly") {
            variables.rowNumber = ``;
            variables.columns = 6;
        }
        else if (type === "monthly") {
            variables.rowNumber = `${dateRows + 1}`;
            variables.columns = 2;
        }
        else if (type === "quarterly") {
            variables.rowNumber = year.charAt(dateRows);
            variables.columns = 0;
        }
        else if (type === "yearly") {
            variables.rowNumber = "";
            variables.columns = 0;
        }
        return variables;
    }
    getCalendarRowItemVariables(options) {
        const { type, monthStartWeekNumber, yearStartDate, year, rowItem, dateRows, columns } = options;
        const itemCount = rowItem + dateRows * columns + dateRows;
        let currentItemDate = "";
        let rowItemText = "";
        if (type === "daily") {
            if (!isNil(monthStartWeekNumber) && !isNil(dateRows) && !isNil(year)) {
                const yearStartDateDaily = moment()
                    .year(year)
                    .startOf("year")
                    .format(DEFAULT_DATE_FORMAT);
                currentItemDate = moment(yearStartDateDaily, DEFAULT_DATE_FORMAT)
                    .add(monthStartWeekNumber + dateRows - 1, "week")
                    .startOf("week")
                    .add(rowItem, "day")
                    .format(DEFAULT_DATE_FORMAT);
                rowItemText = moment(currentItemDate, DEFAULT_DATE_FORMAT).format("D");
            }
        }
        else if (type === "weekly") {
            if (!isNil(yearStartDate) && !isNil(itemCount)) {
                currentItemDate = moment(yearStartDate, DEFAULT_DATE_FORMAT)
                    .add(itemCount, "week")
                    .endOf("week")
                    .format(DEFAULT_DATE_FORMAT);
                const weekNumber = itemCount + 1;
                rowItemText = `W${weekNumber}`;
            }
        }
        else if (type === "monthly") {
            if (!isNil(itemCount) && !isNil(year)) {
                currentItemDate = moment()
                    .year(year)
                    .month(itemCount)
                    .endOf("month")
                    .format(DEFAULT_DATE_FORMAT);
                rowItemText = moment(currentItemDate, DEFAULT_DATE_FORMAT).format("MMM");
            }
        }
        else if (type === "quarterly") {
            if (!isNil(itemCount) && !isNil(year)) {
                currentItemDate = moment()
                    .year(year)
                    .quarter(itemCount + 1)
                    .endOf("quarter")
                    .format(DEFAULT_DATE_FORMAT);
                rowItemText = `Quarter ${itemCount + 1}`;
            }
        }
        const { firstDay, lastDay } = this.getFirstLastDay(currentItemDate, type);
        return {
            itemCount,
            currentItemDate,
            rowItemText,
            firstDay,
            lastDay
        };
    }
    isRowIemValid(options) {
        let valid = false;
        const type = options.type;
        const year = options.year;
        const itemCount = options.itemCount;
        const validWeekCount = this.getYearlyWeekCount(year);
        if (type === "daily") {
            valid = true;
        }
        else if (type === "weekly") {
            if (itemCount < validWeekCount) {
                valid = true;
            }
        }
        else if (type === "monthly") {
            valid = true;
        }
        else if (type === "quarterly") {
            valid = true;
        }
        return valid;
    }
    formatStartDate(config, returnFormat) {
        const startDate = config ? config.startDate : null;
        const type = config ? config.type : "";
        let formattedStartDate = null;
        if (startDate) {
            formattedStartDate = moment(startDate, DEFAULT_DATE_FORMAT)
                .startOf(MOMENT_CONVERSION_MAP[type])
                .format(returnFormat);
        }
        return formattedStartDate;
    }
    getSelectedYear(date) {
        return moment(date, DEFAULT_DATE_FORMAT).format("YYYY");
    }
    getFirstLastDay(date, type) {
        let firstDay = "";
        let lastDay = "";
        if (type === "daily") {
            firstDay = lastDay = date;
        }
        else if (type === "weekly") {
            firstDay = moment(date, DEFAULT_DATE_FORMAT)
                .startOf("week")
                .format(DEFAULT_DATE_FORMAT);
            lastDay = moment(date, DEFAULT_DATE_FORMAT)
                .endOf("week")
                .format(DEFAULT_DATE_FORMAT);
        }
        else if (type === "monthly") {
            firstDay = moment(date, DEFAULT_DATE_FORMAT)
                .startOf("month")
                .format(DEFAULT_DATE_FORMAT);
            lastDay = moment(date, DEFAULT_DATE_FORMAT)
                .endOf("month")
                .format(DEFAULT_DATE_FORMAT);
        }
        else if (type === "quarterly") {
            firstDay = moment(date, DEFAULT_DATE_FORMAT)
                .startOf("quarter")
                .format(DEFAULT_DATE_FORMAT);
            lastDay = moment(date, DEFAULT_DATE_FORMAT)
                .endOf("quarter")
                .format(DEFAULT_DATE_FORMAT);
        }
        else if (type === "yearly") {
            firstDay = moment(date, DEFAULT_DATE_FORMAT)
                .startOf("year")
                .format(DEFAULT_DATE_FORMAT);
            lastDay = moment(date, DEFAULT_DATE_FORMAT)
                .endOf("year")
                .format(DEFAULT_DATE_FORMAT);
        }
        return { firstDay, lastDay };
    }
    getZoneDate(tz, format, date) {
        let _date = moment().valueOf();
        if (date) {
            _date = moment(date, format)
                .startOf("day")
                .valueOf();
        }
        const today = new Date(_date).toLocaleString("en-US", {
            timeZone: TZ_NAMES[tz]
        });
        return moment(today, "MM/DD/YYYY, hh:mm:ss A");
    }
    getZoneToday(tz, viewDateFormat) {
        const today = this.getZoneDate(tz, viewDateFormat);
        return moment(today).format(`${viewDateFormat}  hh:mm A`);
    }
    formatToZoneDate(tz, format, date) {
        const formattedDate = this.getZoneDate(tz, format, date);
        return moment(formattedDate).format(`${format}`);
    }
    convertToViewTimeItem(item) {
        let stringified_item = item + "";
        if (stringified_item.length === 1) {
            stringified_item = `0${stringified_item}`;
        }
        return stringified_item;
    }
    getWeekNumber(date) {
        if (date) {
            const year = moment(date, "YYYY-MM-DD").year();
            const month = moment(date, "YYYY-MM-DD").month();
            const day = Number(moment(date, "YYYY-MM-DD").format("D"));
            const yearStartms = new Date(year, 0, 1);
            const datems = new Date(year, month, day);
            return Math.ceil(((datems.getTime() - yearStartms.getTime()) / 86400000 + yearStartms.getDay() + 1) / 7);
        }
        else {
            console.warn(`
        WARN_NGX_DATETIME_RANGE_PICKER | getWeekNumber:
        Invalid date
      `);
            return getNotAvailableText();
        }
    }
    iterateOverDateObj(dates, func) {
        for (const side in dates) {
            if (side) {
                const sideDates = dates[side];
                sideDates.itemRows.forEach((rows) => {
                    rows.items.forEach((rowItem) => {
                        func(rowItem);
                    });
                });
            }
        }
    }
    getCalendarColspan(type) {
        if (type === "daily") {
            return 6;
        }
        else if (type === "weekly") {
            return 8;
        }
        else if (type === "monthly") {
            return 3;
        }
        else if (type === "quarterly") {
            return 1;
        }
        else if (type === "yearly") {
            return 1;
        }
    }
    getCalendarRowItemColspan(type) {
        if (type === "monthly") {
            return 3;
        }
        else if (type === "quarterly") {
            return 6;
        }
        else if (type === "yearly") {
            return 6;
        }
    }
    getDateCharacteristics(config, state, date, month, side) {
        const currentDate = moment(date, DEFAULT_DATE_FORMAT)
            .startOf("day")
            .valueOf();
        let _date = this.formatDateToDefaultFormat(config.minDate, DEFAULT_DATE_FORMAT);
        const minDate = moment(_date, DEFAULT_DATE_FORMAT)
            .startOf("day")
            .valueOf();
        _date = this.formatDateToDefaultFormat(config.maxDate, DEFAULT_DATE_FORMAT);
        const maxDate = moment(_date, DEFAULT_DATE_FORMAT)
            .startOf("day")
            .valueOf();
        _date = this.formatDateToDefaultFormat(config.startDate, DEFAULT_DATE_FORMAT);
        const startDate = moment(_date, DEFAULT_DATE_FORMAT)
            .startOf("day")
            .valueOf();
        _date = this.formatDateToDefaultFormat(config.endDate, DEFAULT_DATE_FORMAT);
        const endDate = moment(_date, DEFAULT_DATE_FORMAT)
            .startOf("day")
            .valueOf();
        const currentMonthStartDate = moment(month, "MMM YYYY")
            .startOf("month")
            .startOf("day")
            .valueOf();
        const currentMonthEndDate = moment(month, "MMM YYYY")
            .endOf("month")
            .startOf("day")
            .valueOf();
        const available = this.isDateAvailable(currentDate, minDate, maxDate, startDate, endDate, currentMonthStartDate, currentMonthEndDate, config);
        const inRange = this.isDateInRange(currentDate, minDate, maxDate, startDate, endDate, currentMonthStartDate, currentMonthEndDate, available, config);
        const active = this.isDateActive(currentDate, startDate, endDate, side);
        const today = this.isDateToday(currentDate, config);
        // Active
        if (currentDate === startDate && side === "left") {
            state.activeStartDate = date;
        }
        else if (currentDate === endDate && side === "right") {
            state.activeEndDate = date;
        }
        return { available, inRange, active, today };
    }
    getLabelProps(state, calendarType, side) {
        let label, labelFormat, type;
        if (calendarType === "daily") {
            label = `${state.selectedMonth[side]} ${state.selectedYear[side]}`;
            labelFormat = "MMM YYYY";
            type = "month";
        }
        else {
            label = `${state.selectedYear[side]}`;
            labelFormat = "YYYY";
            type = "year";
        }
        return { label, labelFormat, type };
    }
}
NgxDatetimeRangePickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxDatetimeRangePickerService_Factory() { return new NgxDatetimeRangePickerService(); }, token: NgxDatetimeRangePickerService, providedIn: "root" });
NgxDatetimeRangePickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
//# sourceMappingURL=data:application/json;base64,